#include <Wire.h>

// Define IMU I2C addresses
#define IMU1_ADDRESS 0x68
#define IMU2_ADDRESS 0x69

// Define I2C Slave Address for Raspberry Pi communication
#define SLAVE_ADDRESS 8

// Define sensor pins
#define TRIG_PIN 5
#define ECHO_PIN_1 2
#define ECHO_PIN_2 3
#define ECHO_PIN_3 4
#define ECHO_PIN_4 6
#define ECHO_PIN_5 7
#define ECHO_PIN_6 8

// IMU data arrays (accelerometer and gyroscope)
int16_t imu1_data[6] = {0, 0, 0, 0, 0, 0}; // X, Y, Z for accelerometer and gyro
int16_t imu2_data[6] = {0, 0, 0, 0, 0, 0};

// Ultrasonic sensor distances
uint16_t distances[6] = {0, 0, 0, 0, 0, 0};

// Track which chunk of data to send
uint8_t chunk = 0;

void setup() {
  Serial.begin(115200);
  while (!Serial) {}
  Serial.println("Starting Arduino...");

  Wire.begin(SLAVE_ADDRESS);
  Wire.onRequest(requestEvent);

  Wire1.begin(A3, A0);
  Wire1.setClock(100000);

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN_1, INPUT);
  pinMode(ECHO_PIN_2, INPUT);
  pinMode(ECHO_PIN_3, INPUT);
  pinMode(ECHO_PIN_4, INPUT);
  pinMode(ECHO_PIN_5, INPUT);
  pinMode(ECHO_PIN_6, INPUT);

  initializeIMU(IMU1_ADDRESS);
  initializeIMU(IMU2_ADDRESS);

  Serial.println("Arduino is ready.");
}

void loop() {
  readIMUData(IMU1_ADDRESS, imu1_data);
  delay(50);
  readIMUData(IMU2_ADDRESS, imu2_data);
  delay(50);

  // Measure distances with small delays between each sensor to avoid interference
  distances[0] = measureDistance(TRIG_PIN, ECHO_PIN_1);
  delay(50);
  distances[1] = measureDistance(TRIG_PIN, ECHO_PIN_2);
  delay(50);
  distances[2] = measureDistance(TRIG_PIN, ECHO_PIN_3);
  delay(50);
  distances[3] = measureDistance(TRIG_PIN, ECHO_PIN_4);
  delay(50);
  distances[4] = measureDistance(TRIG_PIN, ECHO_PIN_5);
  delay(50);
  distances[5] = measureDistance(TRIG_PIN, ECHO_PIN_6);

  delay(500);
}

void initializeIMU(uint8_t imu_address) {
  Wire1.beginTransmission(imu_address);
  Wire1.write(0x6B);
  Wire1.write(0);
  Wire1.endTransmission();
}

void readIMUData(uint8_t imu_address, int16_t *imu_data) {
  Wire1.beginTransmission(imu_address);
  Wire1.write(0x3B);
  Wire1.endTransmission(false);
  Wire1.requestFrom(imu_address, 14);
  for (int i = 0; i < 3; i++) imu_data[i] = (Wire1.read() << 8) | Wire1.read();
  Wire1.read(); Wire1.read(); // Skip temp data
  for (int i = 3; i < 6; i++) imu_data[i] = (Wire1.read() << 8) | Wire1.read();
}

long measureDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duration = pulseIn(echoPin, HIGH, 30000);
  if (duration == 0) return 0;
  return duration * 0.034 / 2;
}

void requestEvent() {
  uint8_t buffer[18];
  int index = 0;

  if (chunk == 0) {
    for (int i = 0; i < 6; i++) {
      buffer[index++] = (imu1_data[i] >> 8) & 0xFF;
      buffer[index++] = imu1_data[i] & 0xFF;
    }
  } else if (chunk == 1) {
    for (int i = 0; i < 6; i++) {
      buffer[index++] = (imu2_data[i] >> 8) & 0xFF;
      buffer[index++] = imu2_data[i] & 0xFF;
    }
  } else if (chunk == 2) {
    for (int i = 0; i < 6; i++) {
      buffer[index++] = (distances[i] >> 8) & 0xFF;
      buffer[index++] = distances[i] & 0xFF;
    }
  }

  Wire.write(buffer, sizeof(buffer));
  chunk = (chunk + 1) % 3;
}
